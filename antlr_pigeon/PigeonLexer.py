# Generated from /Users/benlaskaris/Documents/GitHub/pidgeon/Pigeon.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2!")
        buf.write("\u00a1\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5")
        buf.write("\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f")
        buf.write("\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3")
        buf.write("\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\6\34")
        buf.write("\u0082\n\34\r\34\16\34\u0083\3\35\6\35\u0087\n\35\r\35")
        buf.write("\16\35\u0088\3\36\3\36\7\36\u008d\n\36\f\36\16\36\u0090")
        buf.write("\13\36\3\36\3\36\3\37\6\37\u0095\n\37\r\37\16\37\u0096")
        buf.write("\3 \5 \u009a\n \3 \3 \6 \u009e\n \r \16 \u009f\2\2!\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!\3\2\5\6\2C]__aac|\3")
        buf.write("\2\62;\4\2\f\f\17\17\2\u00a7\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\3A\3\2\2\2\5C\3\2\2\2\7E\3\2")
        buf.write("\2\2\tG\3\2\2\2\13I\3\2\2\2\rK\3\2\2\2\17M\3\2\2\2\21")
        buf.write("O\3\2\2\2\23Q\3\2\2\2\25S\3\2\2\2\27U\3\2\2\2\31W\3\2")
        buf.write("\2\2\33Y\3\2\2\2\35[\3\2\2\2\37]\3\2\2\2!_\3\2\2\2#a\3")
        buf.write("\2\2\2%c\3\2\2\2\'f\3\2\2\2)i\3\2\2\2+l\3\2\2\2-o\3\2")
        buf.write("\2\2/r\3\2\2\2\61u\3\2\2\2\63x\3\2\2\2\65|\3\2\2\2\67")
        buf.write("\u0081\3\2\2\29\u0086\3\2\2\2;\u008a\3\2\2\2=\u0094\3")
        buf.write("\2\2\2?\u009d\3\2\2\2AB\7r\2\2B\4\3\2\2\2CD\7t\2\2D\6")
        buf.write("\3\2\2\2EF\7e\2\2F\b\3\2\2\2GH\7v\2\2H\n\3\2\2\2IJ\7i")
        buf.write("\2\2J\f\3\2\2\2KL\7h\2\2L\16\3\2\2\2MN\7u\2\2N\20\3\2")
        buf.write("\2\2OP\7q\2\2P\22\3\2\2\2QR\7f\2\2R\24\3\2\2\2ST\7@\2")
        buf.write("\2T\26\3\2\2\2UV\7>\2\2V\30\3\2\2\2WX\7~\2\2X\32\3\2\2")
        buf.write("\2YZ\7\65\2\2Z\34\3\2\2\2[\\\7\67\2\2\\\36\3\2\2\2]^\7")
        buf.write("|\2\2^ \3\2\2\2_`\7z\2\2`\"\3\2\2\2ab\7A\2\2b$\3\2\2\2")
        buf.write("cd\7p\2\2de\7n\2\2e&\3\2\2\2fg\7>\2\2gh\7r\2\2h(\3\2\2")
        buf.write("\2ij\7>\2\2jk\7t\2\2k*\3\2\2\2lm\7>\2\2mn\7e\2\2n,\3\2")
        buf.write("\2\2op\7>\2\2pq\7i\2\2q.\3\2\2\2rs\7>\2\2st\7h\2\2t\60")
        buf.write("\3\2\2\2uv\7>\2\2vw\7v\2\2w\62\3\2\2\2xy\7k\2\2yz\7p\2")
        buf.write("\2z{\7f\2\2{\64\3\2\2\2|}\7t\2\2}~\7g\2\2~\177\7r\2\2")
        buf.write("\177\66\3\2\2\2\u0080\u0082\t\2\2\2\u0081\u0080\3\2\2")
        buf.write("\2\u0082\u0083\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084")
        buf.write("\3\2\2\2\u00848\3\2\2\2\u0085\u0087\t\3\2\2\u0086\u0085")
        buf.write("\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u0086\3\2\2\2\u0088")
        buf.write("\u0089\3\2\2\2\u0089:\3\2\2\2\u008a\u008e\7%\2\2\u008b")
        buf.write("\u008d\n\4\2\2\u008c\u008b\3\2\2\2\u008d\u0090\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0091\3")
        buf.write("\2\2\2\u0090\u008e\3\2\2\2\u0091\u0092\b\36\2\2\u0092")
        buf.write("<\3\2\2\2\u0093\u0095\7\"\2\2\u0094\u0093\3\2\2\2\u0095")
        buf.write("\u0096\3\2\2\2\u0096\u0094\3\2\2\2\u0096\u0097\3\2\2\2")
        buf.write("\u0097>\3\2\2\2\u0098\u009a\7\17\2\2\u0099\u0098\3\2\2")
        buf.write("\2\u0099\u009a\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009e")
        buf.write("\7\f\2\2\u009c\u009e\7\17\2\2\u009d\u0099\3\2\2\2\u009d")
        buf.write("\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u009d\3\2\2\2")
        buf.write("\u009f\u00a0\3\2\2\2\u00a0@\3\2\2\2\n\2\u0083\u0088\u008e")
        buf.write("\u0096\u0099\u009d\u009f\3\b\2\2")
        return buf.getvalue()


class PigeonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    ID = 27
    INT = 28
    LINE_COMMENT = 29
    WS = 30
    NL = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'p'", "'r'", "'c'", "'t'", "'g'", "'f'", "'s'", "'o'", "'d'", 
            "'>'", "'<'", "'|'", "'3'", "'5'", "'z'", "'x'", "'?'", "'nl'", 
            "'<p'", "'<r'", "'<c'", "'<g'", "'<f'", "'<t'", "'ind'", "'rep'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "LINE_COMMENT", "WS", "NL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "ID", "INT", "LINE_COMMENT", "WS", "NL" ]

    grammarFileName = "Pigeon.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


